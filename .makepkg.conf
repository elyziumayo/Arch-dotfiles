CHOST="x86_64-pc-linux-gnu"

# === Use Clang + LLVM Toolchain ===
export CC=clang
export CXX=clang++
export LD=clang
export AR=llvm-ar
export NM=llvm-nm
export STRIP=llvm-strip
export OBJCOPY=llvm-objcopy
export OBJDUMP=llvm-objdump
export READELF=llvm-readelf
export RANLIB=llvm-ranlib
export HOSTCC=clang
export HOSTCXX=clang++
export HOSTAR=llvm-ar

# === Compiler Flags (Clang + full LTO + native optimizations) ===
CFLAGS="-march=native -mtune=native -O3 -pipe -fexceptions \
        -falign-functions=32 -fno-math-errno -fno-trapping-math \
        -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection -flto=full"

CXXFLAGS="$CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS"

# === Linker Flags: Use mold with full LTO and security ===
LDFLAGS="-fuse-ld=mold -flto=full -Wl,-O2,--sort-common,--as-needed \
         -Wl,-z,relro -Wl,-z,now -Wl,-z,pack-relative-relocs"

# === Rust Compilation: Full fat LTO and mold ===
RUSTFLAGS="-C opt-level=3 -C lto=fat -C target-cpu=native -C linker=mold \
           -C link-arg=-Wl,-z,pack-relative-relocs"

# === Force Full LTO for C/C++ ===
LTOFLAGS="-flto=full"

# === Parallel Builds: Use all logical cores ===
MAKEFLAGS="-j$(nproc) -l$(nproc)"
NINJAFLAGS="-j$(nproc)"

# === Pacman Packaging: Stripped, optimized, and compressed ===
PKGEXT='.pkg.tar.zst'
OPTIONS=(strip !docs !debug !libtool !staticlibs emptydirs zipman purge lto)

# === Build Directory (optional, for tmpfs or SSD speed) ===
BUILDDIR=/tmp/makepkg
